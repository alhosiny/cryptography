
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hp
 */
public class DES extends javax.swing.JDialog {

    /**
     * Creates new form DES
     */
    public DES(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        key = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton2.setText("ENC");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton4.setText("DEC");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jInternalFrame1.setVisible(true);

        key.setText("Key");
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(key)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)))
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jButton2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInternalFrame1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    final JFileChooser fileDialog = new JFileChooser();
    File file;

    void displayF(File fil, JTextArea j) throws FileNotFoundException {
        Scanner read = new Scanner(fil);
        String buf = "";
        while (read.hasNext()) {
            buf = read.nextLine();
            j.setText(buf + "\n");

        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int returnVal = fileDialog.showOpenDialog(mainFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileDialog.getSelectedFile();
            try {
                displayF(file, jTextArea1);
                ENC(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DES.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            statusLabel.setText("Open command cancelled by user.");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int returnVal = fileDialog.showOpenDialog(mainFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileDialog.getSelectedFile();
            try {
                displayF(file, jTextArea4);
                DEC(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DES.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            statusLabel.setText("Open command cancelled by user.");
        }

// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        int returnVal = fileDialog.showOpenDialog(mainFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            keyFile = fileDialog.getSelectedFile();
            // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        inPermutations();
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DES dialog = new DES(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

        String x;
        x = Ffun("11111111111111111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    static int[] IPermu, FPermu, expan, PermuF, Kpermu, Kpermu2;
    static int[][] s1, s2, s3, s4, s5, s6, s7, s8;
    static Map<Integer, int[][]> Sboxs;

    static void inPermutations() throws FileNotFoundException {
        Sboxs = new HashMap<Integer, int[][]>();
        IPermu = new int[64];
        FPermu = new int[64];
        expan = new int[48];
        s1 = new int[4][16];
        s2 = new int[4][16];
        s3 = new int[4][16];
        s4 = new int[4][16];
        s5 = new int[4][16];
        s6 = new int[4][16];
        s7 = new int[4][16];
        s8 = new int[4][16];
        PermuF = new int[32];
        Kpermu = new int[56];
        Kpermu2 = new int[48];
        File perm = new File("Permutation.txt");
        Scanner rperm = new Scanner(perm);
        for (int i = 0; i < 64; i++) {
            IPermu[i] = rperm.nextInt();
        }
        for (int i = 0; i < 64; i++) {
            FPermu[i] = rperm.nextInt();
        }
        for (int i = 0; i < 48; i++) {
            expan[i] = rperm.nextInt();
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s1[i][j] = rperm.nextInt();
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s2[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s3[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s4[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s5[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s6[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s7[i][j] = rperm.nextInt();
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                s8[i][j] = rperm.nextInt();
            }
        }

        Sboxs.put(1, s1);
        Sboxs.put(2, s2);
        Sboxs.put(3, s3);
        Sboxs.put(4, s4);
        Sboxs.put(5, s5);
        Sboxs.put(6, s6);
        Sboxs.put(7, s7);
        Sboxs.put(8, s8);

        for (int y = 0; y < 32; y++) {
            PermuF[y] = rperm.nextInt();
        }

        for (int i = 0; i < 56; i++) {
            Kpermu[i] = rperm.nextInt();
        }

        for (int i = 0; i < 48; i++) {
            Kpermu2[i] = rperm.nextInt();
        }
    }
    File keyFile;

    static String PermuBit(int[] IoRP, String s) {
        String rs = "";
        for (int y = 0; y < IoRP.length; y++) {
            rs += "" + s.charAt(IoRP[y] - 1);
        }
        return rs;
    }

    static String[] Expanti(String r) {
        String[] r48 = new String[48];
        for (int i = 0; i < 48; i++) {
            r48[i] = "" + r.charAt(expan[i] - 1);
        }
        return r48;
    }

    static String Ffun(String right, String ke) {
        String[] r48 = Expanti(right);
        String[] xor = new String[48];
        String newr = "";
        String newright = "";
        for (int i = 0; i < 48; i++) {
            xor[i] = "" + (r48[i].charAt(0) ^ ke.charAt(i));
        }
        int i = 0;
        int box = 1;
        while (i + 6 <= 48) {
            String rowS = xor[i] + xor[i + 5];
            int rowi = Integer.parseInt(rowS, 2);
            String colS = xor[i + 1] + xor[i + 2] + xor[i + 3] + xor[i + 4];
            int coli = Integer.parseInt(colS, 2);
            String hel = Integer.toBinaryString(Sboxs.get(box)[rowi][coli]);
            for (int k = 0; k < 4 - hel.length(); k++) {
                newr += 0;
            }
            newr += hel;
            box++;
            i += 6;
        }
        newright = PermuBit(PermuF, newr);
        return newright;
    }

    void ENC(File fil) throws FileNotFoundException {
        EnD();
        PrintWriter keySc = new PrintWriter("KeySchduel.txt");
        PrintWriter L_R = new PrintWriter("L_R.txt");
        Scanner ref = new Scanner(fil);
        int[] InofSpaces = new int[50];
        String block = "";
        int spa = 0;
        int ispa = 0;
        int numspaces = 0;
        while (ref.hasNext()) {
            String x = ref.next();
            block += x;

        }
        String key1 = "";
        Scanner reK = new Scanner(keyFile);
        while (reK.hasNext()) {
            key1 += reK.nextLine();
        }
        String keyP = "";
        String FirstKey = "";
        FirstKey = PermuBit(Kpermu, key1);
        String L = "";
        String R = "";
        String nL;
        String nR;
        String EncBlock = "";
        while (block.length() != 0) {
            keyP = FirstKey;
            String blo64;
            if (block.length() > 64) {
                blo64 = block.substring(0, 64);
                block = block.substring(64);
            } else {
                blo64 = block.substring(0);
                for (int y = 0; y < 64 - block.length(); y++) {
                    blo64 += "0";
                }
                block = "";
            }
            blo64 = PermuBit(IPermu, blo64);
            L = blo64.substring(0, 32);
            L_R.println("L" + "0" + "=" + L);
            R = blo64.substring(32);
            L_R.println("R" + "0" + "=" + R);
            String keyc = "";
            String keyd = "";
            for (int y = 1; y < 17; y++) {
                nR = "";
                nL = R;
                keyc = keyP.substring(0, 28);
                keySc.println("c" + (y - 1) + "=" + keyc);
                keyd = keyP.substring(28);
                keySc.println("d" + (y - 1) + "=" + keyd);
                if (y == 1 || y == 2 || y == 9 || y == 16) {
                    keyc = keyc.substring(1) + keyc.substring(0, 1);
                    keyd = keyd.substring(1) + keyd.substring(0, 1);
                } else {
                    keyc = keyc.substring(2) + keyc.substring(0, 2);
                    keyd = keyd.substring(2) + keyd.substring(0, 2);
                }
                keyP = keyc + keyd;
                String EkeyP = PermuBit(Kpermu2, keyP);
                String aFun = Ffun(R, EkeyP);
                for (int q = 0; q < aFun.length(); q++) {
                    nR += L.charAt(q) ^ aFun.charAt(q);
                }
                L = nL;
                R = nR;
                L_R.println("L" + y + "=" + L);
                L_R.println("R" + y + "=" + R);
            }
            keySc.println("c" + (16) + "=" + keyc);
            keySc.println("d" + (16) + "=" + keyd);
            EncBlock += PermuBit(FPermu, R + L);
        }
        PrintWriter out = new PrintWriter("EncFile.txt");
        int in = 0;
        int u;
        out.print(EncBlock);
        out.close();
        keySc.close();
        L_R.close();
        displayF(new File("EncFile.txt"), jTextArea2);
    }

    void DEC(File fil) throws FileNotFoundException {
        EnD();
        Scanner ref = new Scanner(fil);
        int[] InofSpaces = new int[50];
        String block = "";
        int spa = 0;
        int ispa = 0;
        int numspaces = 0;
        while (ref.hasNext()) {
            String x = ref.next();
            block += x;
        }

        String key1 = "";
        Scanner reK = new Scanner(keyFile);
        while (reK.hasNext()) {
            key1 += reK.nextLine();
        }
        String keyP = "";
        String Firstkey = "";
        Firstkey = PermuBit(Kpermu, key1);
        String L = "";
        String R = "";
        String nL;
        String nR;
        String EncBlock = "";
        while (block.length() != 0) {
            keyP = Firstkey;
            String blo64;
            if (block.length() > 64) {
                blo64 = block.substring(0, 64);
                block = block.substring(64);
            } else {
                blo64 = block.substring(0);
                for (int y = 0; y < 64 - block.length(); y++) {
                    blo64 += "0";
                }
                block = "";
            }

            String EkeyP = PermuBit(Kpermu2, keyP);
            blo64 = PermuBit(IPermu, blo64);
            L = blo64.substring(0, 32);
            R = blo64.substring(32);
            for (int y = 1; y < 17; y++) {
                nR = "";
                nL = R;
                String aFun = Ffun(R, EkeyP);
                for (int q = 0; q < aFun.length(); q++) {
                    nR += L.charAt(q) ^ aFun.charAt(q);
                }

                L = nL;
                R = nR;
                String keyc = keyP.substring(0, 28);
                String keyd = keyP.substring(28);
                if (y + 1 == 2 || y + 1 == 9 || y + 1 == 16) {
                    keyc = keyc.substring(27) + keyc.substring(0, 27);
                    keyd = keyd.substring(27) + keyd.substring(0, 27);
                } else {
                    keyc = keyc.substring(26) + keyc.substring(0, 26);
                    keyd = keyd.substring(26) + keyd.substring(0, 26);
                }
                keyP = keyc + keyd;
                EkeyP = PermuBit(Kpermu2, keyP);

            }
            EncBlock += PermuBit(FPermu, (R + L));
        }
        PrintWriter out = new PrintWriter("DecFile.txt");
        int in = 0;
        out.print(EncBlock);
        out.close();
        displayF(new File("DecFile.txt"), jTextArea3);
    }

    static Map<String, String> EnA;
    static Map<String, String> DeA;

    static void EnD() {
        EnA = new HashMap<String, String>();
        DeA = new HashMap<String, String>();
        int[] l = {0, 0, 0, 0, 0};
        EnA.put("a", "00000");
        DeA.put("00000", "a");
        int[] y = {0, 0, 0, 0, 1};
        EnA.put("b", "00001");
        DeA.put("00001", "b");

        for (int w = 2; w < 32; w++) {
            String bit = "";
            int[] e = new int[5];
            e[0] = y[2] ^ y[4];
            bit += e[0];
            for (int u = 1; u < 5; u++) {
                e[u] = y[u - 1];
                bit += e[u];
            }
            y = e;
            if (w < 26) {
                EnA.put((char) ('a' + w) + "", bit);
                DeA.put(bit, (char) ('a' + w) + "");
            } else {
                EnA.put((w - 24) + "", bit);
                DeA.put(bit, (w - 24) + "");

            }

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JButton key;
    // End of variables declaration//GEN-END:variables
    private static JFrame mainFrame;
    private static JLabel headerLabel;
    private static JLabel statusLabel;
    private static JPanel controlPanel;
}
